<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="whatsnew"
	xmlns="http://docbook.org/ns/docbook" version="5.0"
	xmlns:xl="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
		http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd">
	<title>What's New</title>
	<sect1 xml:id="whatsnew-swf-240">
		<title>Spring Web Flow 2.4</title>
		<para>This release requires JDK 1.6.</para>
		<sect2 xml:id="whatsnew-swf-java-config">
			<title>Java-based Configuration</title>
			<para>
				Web Flow now supports a Java-based alternative for its system configuration.
				See the updated <xref linkend="system-setup" />.
			</para>
			<para>
				Also see the
				<link xl:href="https://github.com/spring-projects/spring-webflow-samples/tree/master/booking-mvc">booking-mvc</link> and
				<link xl:href="https://github.com/spring-projects/spring-webflow-samples/tree/master/booking-faces">booking-faces</link>
				samples that have been updated to use all Java config.
			</para>
		</sect2>
		<sect2 xml:id="whatsnew-swf-mvcflash">
			<title>Spring MVC Flash Scope Integration</title>
			<para>
				When a flow ends it can now redirect to a Spring MVC controller after saving
				attributes in Spring MVC's flash scope for the controller to access.
			</para>
			<para>
				See <xref linkend="spring-mvc-flash-output"/>.
			</para>
		</sect2>
		<sect2 xml:id="whatsnew-partial-validation">
			<title>Partial JSR-303 Bean Validation</title>
			<para>
				A flow definition can apply partial validation on the model through the validation-hints
				attribute supported on view state and transition elements.
			</para>
			<para>
				See <xref linkend="view-validation-jsr303-partial" />.
			</para>
		</sect2>
		<sect2 xml:id="whatsnew-hibernate4">
			<title>Hibernate Support</title>
			<para>
				The <classname>HibernateFlowExecutionListener</classname> now supports Hibernate 4 in addition to Hibernate 3.
			</para>
			<para>
				As of 2.4.4 the <classname>HibernateFlowExecutionListener</classname> also works with Hibernate 5.
			</para>
		</sect2>
		<sect2 xml:id="whatsnew-tiles3">
			<title>Tiles 3 Support</title>
			<para>
				The <classname>AjaxTilesView</classname> now supports Tiles 3 in addition to Tiles 2.2.
			</para>
		</sect2>
		<sect2 xml:id="whatsnew-swf-jsf20">
			<title>Minimum JSF 2.0 Requirement</title>
			<para>
				Java ServerFaces version 1.2 and earlier are no longer supported by Spring Web Flow, if you have not done so already you will need to upgrade to JSF 2.0 or above.
				In addition the Spring Faces components that were previously provided with JSF 1.2 for progressive AJAX enhancements have been removed in this release.
			</para>
			<para>
				See <xref linkend="spring-faces-upgrade-from-swf23"/>.
			</para>
		</sect2>
		<sect2 xml:id="whatsnew-swf-jsf20-portlet">
			<title>Portlet API 2.0 and JSF 2.0 support</title>
			<para>
				The internal Portlet integration introduced in Spring Web Flow 2.2 has been upgraded for JSF 2.0 compatibility.
				Some of the more advanced JSF 2.0 features, such as partial state saving, are not supported in a Portlet environment, however, existing application can now upgrade to the minimum required JSF version.
				Upgraded projects will need to ensure that the <code>&lt;faces:resources&gt;</code> elements is
				included as part of their Spring configuration.
			</para>
			<para>
				See <xref linkend="portlet-jsf"/>.
			</para>
		</sect2>
		<sect2 xml:id="whatsnew-deprecation">
			<title>Deprecations</title>
			<para>
				This release deprecates <emphasis>Spring.js</emphasis>. The deprecation includes the entire
				<emphasis>spring-js-resources</emphasis> module including <emphasis>Spring.js</emphasis> and
				<emphasis>Spring-Dojo.js</emphasis> and the bundled Dojo and CSS Framework.
				Also deprecated is the <classname>SpringJavascriptAjaxHandler</classname>
				from the <emphasis>spring-js</emphasis> module. The rest of <emphasis>spring-js</emphasis>,
				e.g. <classname>AjaxHandler</classname>, <classname>AjaxTilesView</classname>, will be
				folded into <emphasis>spring-webflow</emphasis> in a future release.
			</para>
			<para>
				OGNL support is now deprecated.
			</para>
		</sect2>
	</sect1>
	<sect1 xml:id="whatsnew-swf-230">
		<title>Spring Web Flow 2.3</title>
		<sect2 xml:id="whatsnew-swf-embedded-flow">
			<title>Embedding A Flow On A Page</title>
			<para>
				By default Web Flow does a client-side redirect upon entering every view state.
				That makes it impossible to embed a flow on a page or within a modal dialog and execute more than one view state without causing a full-page refresh.
				Web Flow now supports launching a flow in "embedded" mode.
				In this mode a flow can transition to other view states without a client-side redirect during Ajax requests.
				See <xref linkend="spring-mvc-embedded-flow"/> and <xref linkend="spring-faces-embedded-mode"/>.
			</para>
		</sect2>
		<sect2 xml:id="whatsnew-jsr303">
			<title>Support For JSR-303 Bean Validation</title>
			<para>
				Support for the JSR-303 Bean Validation API is now available building on equivalent support available in Spring MVC.
				See <xref linkend="view-validate"/> for more details.
			</para>
		</sect2>
		<sect2 xml:id="whatsnew-pc-propagation">
			<title>Flow-Managed Persistence Context Propagation</title>
			<para>
				Starting with Web Flow 2.3 a flow managed <code>PersistenceContext</code> is automatically extended (propagated) to sub-flows assuming the subflow also has the feature enabled as well.
				See <xref linkend="flow-managed-persistence-propagation"/>.
			</para>
		</sect2>
		<sect2 xml:id="whatsnew-portlet-resource-requests">
			<title>Portlet 2.0 Resource Requests</title>
			<para>
				Support for Portlet 2.0 resource requests has now been added enabling Ajax requests with partial rendering.
				URLs for such requests can be prepared with the <code>&lt;portlet:resourceURL&gt;</code> tag in JSP pages.
				Server-side processing is similar to a combined an action and a render requests but combined in a single request.
				Unlike a render request, the response from a resource request includes content from the target portlet only.
			</para>
		</sect2>
		<sect2 xml:id="whatsnew-conversation-manager">
			<title>Custom ConversationManager</title>
			<para>
				The <code>&lt;flow-execution-repository&gt;</code> element now provides a conversation-manager attribute accepting a reference to a ConversationManager instance.
			</para>
		</sect2>
		<sect2 xml:id="whatsnew-redirect-in-same-state">
			<title>Redirect In Same State</title>
			<para>
		    	By default Web Flow does a client-side redirect when remaining in the same view state as long as the current request is not an Ajax request.
		    	This is useful after form validation failure.
		    	Hitting Refresh or Back won't result in browser warnings.
				Hence this behavior is usually desirable.
				However a new flow execution attribute makes it possible to disable it and that may also be necessary in some cases specific to JSF applications.
				See <xref linkend="spring-faces-redirect-in-same-state"/>.
			</para>
		</sect2>
		<sect2 xml:id="whatsnew-samples">
			<title>Samples</title>
			<para>
				The process for building the samples included with the distribution has been simplified.
				Maven can be used to build all samples in one step.
				Eclipse settings include source code references to simplify debugging.
			</para>
			<para>
				Additional samples can be accessed as follows:
<programlisting language="xml">mkdir spring-samples
cd spring-samples
svn co https://src.springframework.org/svn/spring-samples/webflow-primefaces-showcase
cd webflow-primefaces-showcase
mvn package
# import into Eclipse
</programlisting>

<programlisting language="xml">mkdir spring-samples
cd spring-samples
svn co https://src.springframework.org/svn/spring-samples/webflow-showcase
cd webflow-showcase
mvn package
# import into Eclipse
</programlisting>
			</para>
		</sect2>
	</sect1>
</chapter>
