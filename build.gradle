
buildscript {

    repositories {
        maven { url 'http://repo.springsource.org/plugins-release' }
    }

    dependencies {
        classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.1.3'
    }

    project.ext {
      springVersion = '3.1.1.RELEASE'
      springSecurityVersion = '3.0.7.RELEASE'
      slf4jVersion = '1.6.1'
      log4jVersion = '1.2.15'
    }
}

configure(allprojects) {

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    group = 'org.springframework.webflow'

    sourceCompatibility=1.5
    targetCompatibility=1.5

    [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:none']

    sourceSets.test.resources.srcDirs = ['src/main/java', 'src/test/resources', 'src/test/java']

    test {
      systemProperty("java.awt.headless", "true")
      include '**/*Tests.class'
    }

    repositories {
        maven { url "http://repo.springsource.org/libs-release" }
    }

    dependencies {
        testCompile "junit:junit:3.8.2"
        testCompile "org.easymock:easymock:2.5.1"
    }
}

configure(subprojects) { subproject ->

    apply from: "${rootProject.projectDir}/publish-maven.gradle"

    jar {
        manifest.attributes['Implementation-Title'] = subproject.name
        manifest.attributes['Implementation-Version'] = subproject.version

        from("${rootProject.projectDir}/src/dist") {
            include "license.txt"
            include "notice.txt"
            into "META-INF"
            expand(copyright: new Date().format('yyyy'), version: project.version)
        }
    }

    javadoc {
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = project.name
    }

    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project('spring-binding') {

    description = 'Spring Binding'

    dependencies {

        compile("javax.el:el-api:2.2", provided)
        compile "commons-logging:commons-logging:1.1.1"
        compile "opensymphony:ognl:2.6.11"
        compile "org.springframework:spring-beans:$springVersion"
        compile "org.springframework:spring-context:$springVersion"
        compile "org.springframework:spring-core:$springVersion"
        compile "org.springframework:spring-expression:$springVersion"

        testCompile("log4j:log4j:$log4jVersion") { dep ->
            optional dep
            exclude group: 'javax.mail', module: 'mail'
            exclude group: 'javax.jms', module: 'jms'
            exclude group: 'com.sun.jdmk', module: 'jmxtools'
            exclude group: 'com.sun.jmx', module: 'jmxri'
        }
        testCompile("org.apache.tomcat:tomcat-jasper-el:7.0.27")
    }
}

project('spring-js') {

    description = 'Spring JS'

    dependencies {

        // depend on spring-js-resources in order to have it show up as a
        // <dependency> in the generated pom
        // compile project(":spring-js-resources")

        compile "commons-logging:commons-logging:1.1.1"
        compile("javax.servlet:servlet-api:2.5", provided)
        compile("org.apache.tiles:tiles-api:2.1.2", optional)
        compile("org.apache.tiles:tiles-core:2.1.2", optional)
        compile("org.apache.tiles:tiles-jsp:2.1.2", optional)
        compile("org.apache.tiles:tiles-servlet:2.1.2", optional)
        compile "org.springframework:spring-beans:$springVersion"
        compile "org.springframework:spring-context:$springVersion"
        compile "org.springframework:spring-core:$springVersion"
        compile "org.springframework:spring-web:$springVersion"
        compile "org.springframework:spring-webmvc:$springVersion"

        testCompile("javax.servlet:jstl:1.2", provided)
        testCompile("log4j:log4j:$log4jVersion") { dep ->
            optional dep
            exclude group: 'javax.mail', module: 'mail'
            exclude group: 'javax.jms', module: 'jms'
            exclude group: 'com.sun.jdmk', module: 'jmxtools'
            exclude group: 'com.sun.jmx', module: 'jmxri'
        }
        testCompile "org.springframework:spring-test:$springVersion"
    }
}

project('spring-webflow') {

    description = 'Spring Web Flow'

    dependencies {

        compile project(":spring-binding")
        compile project(":spring-js")

        compile "commons-logging:commons-logging:1.1.1"
        compile("javax.el:el-api:2.2", provided)
        compile("javax.persistence:persistence-api:1.0.2", provided)
        compile("javax.servlet:servlet-api:2.5", provided)
        compile("javax.portlet:portlet-api:2.0", provided)
        compile("javax.transaction:transaction-api:1.1-rev-1", provided)
        compile("junit:junit:3.8.2", provided)
        compile "opensymphony:ognl:2.6.11"
        compile("org.hibernate:hibernate:3.2.7.ga") { dep ->
            optional dep
            exclude group: 'org.slf4j', module: 'slf4j-api'
        }
        compile("org.slf4j:slf4j-api:$slf4jVersion", optional)
        compile "org.springframework:spring-beans:$springVersion"
        compile "org.springframework:spring-context:$springVersion"
        compile "org.springframework:spring-core:$springVersion"
        compile "org.springframework:spring-expression:$springVersion"
        compile("org.springframework:spring-orm:$springVersion", optional)
        compile("org.springframework:spring-tx:$springVersion", optional)
        compile "org.springframework:spring-web:$springVersion"
        compile "org.springframework:spring-webmvc:$springVersion"
        compile("org.springframework:spring-webmvc-portlet:$springVersion", optional)
        compile("org.springframework.security:spring-security-core:$springSecurityVersion", optional)

        testCompile "org.apache.openjpa:openjpa:1.1.0"
        testCompile "org.apache.openjpa:openjpa-lib:1.1.0"
        testCompile "org.apache.openjpa:openjpa-persistence:1.1.0"
        testCompile "org.apache.openjpa:openjpa-persistence-jdbc:1.1.0"
        testCompile "org.apache.tomcat:tomcat-jasper-el:7.0.27"
        testCompile "org.hsqldb:hsqldb:2.2.8"
        testCompile "org.springframework:spring-aop:$springVersion"
        testCompile "org.springframework:spring-jdbc:$springVersion"
        testCompile "org.springframework:spring-test:$springVersion"
    }
}

project('spring-faces') {

    description = 'Spring Faces'

    dependencies {
        compile project(":spring-binding")
        compile project(":spring-js")
        compile project(":spring-webflow")

        compile "commons-logging:commons-logging:1.1.1"
        compile("javax.servlet:servlet-api:2.5", provided)
        compile("javax.portlet:portlet-api:2.0", provided)
        compile "org.springframework:spring-beans:$springVersion"
        compile "org.springframework:spring-context:$springVersion"
        compile "org.springframework:spring-core:$springVersion"
        compile "org.springframework:spring-expression:$springVersion"
        compile "org.springframework:spring-web:$springVersion"
        compile "org.springframework:spring-webmvc:$springVersion"
        compile("org.springframework.security:spring-security-core:$springSecurityVersion", optional)
        compile("org.springframework.security:spring-security-web:$springSecurityVersion", optional)
        compile("com.sun.facelets:jsf-facelets:1.1.14", optional)
        compile("com.sun.faces:jsf-api:2.1.7", provided)
        compile("com.sun.faces:jsf-impl:2.1.7", provided)

        testCompile("log4j:log4j:$log4jVersion") { dep ->
            optional dep
            exclude group: 'javax.mail', module: 'mail'
            exclude group: 'javax.jms', module: 'jms'
            exclude group: 'com.sun.jdmk', module: 'jmxtools'
            exclude group: 'com.sun.jmx', module: 'jmxri'
        }
        testCompile "org.apache.myfaces.test:myfaces-test20:1.0.0-beta"
        testCompile "org.apache.tomcat:tomcat-jasper-el:7.0.27"
        testCompile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        testCompile("org.slf4j:slf4j-log4j12:$slf4jVersion") {
            exclude group: 'log4j', module: 'log4j'
        }
        testCompile "org.springframework:spring-test:$springVersion"
    }
}

configure(rootProject) {

    description = 'Spring Web Flow'

    // don't publish the default jar for the root project
    configurations.archives.artifacts.clear()

    artifacts {
    }

    task api(type: Javadoc) {
        group = 'Documentation'
        description = 'Generates aggregated Javadoc API documentation.'
        title = "${rootProject.description} ${version} API"
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = rootProject.description
        options.overview = 'src/api/overview.html'
        source subprojects.collect { project ->
            project.sourceSets.main.allJava
        }
        destinationDir = new File(buildDir, "api")
        classpath = files(subprojects.collect { project ->
            project.sourceSets.main.compileClasspath
        })
        maxMemory = '1024m'
    }

    task wrapper(type: Wrapper) {
        description = 'Generates gradlew[.bat] scripts'
        gradleVersion = '1.0-rc-1'
    }
}

