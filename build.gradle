buildscript {
	repositories {
		maven { url "https://repo.spring.io/plugins-release" }
	}
	dependencies {
		classpath("io.spring.gradle:propdeps-plugin:0.0.9.RELEASE")
		classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2")
		classpath "org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16"
	}
}

allprojects {

	group = "org.springframework.webflow"

	apply plugin: "propdeps"
	apply plugin: "java"
	apply from: "${rootProject.projectDir}/ide.gradle"

	repositories {
		mavenCentral()
		if (!version.endsWith('RELEASE')) {
			maven { url "https://repo.spring.io/milestone" }
		}
		if (version.endsWith('SNAPSHOT')) {
			maven { url "https://repo.spring.io/snapshot" }
		}
	}
}

subprojects { subproject ->

	apply from: "${rootProject.projectDir}/publish-maven.gradle"

	sourceCompatibility=1.8
	targetCompatibility=1.8

	[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:none"]

	sourceSets.test.resources.srcDirs = ["src/main/java", "src/test/resources", "src/test/java"]

	jar {
		manifest.attributes["Implementation-Title"] = subproject.name
		manifest.attributes["Implementation-Version"] = subproject.version

		from("${rootProject.projectDir}/src/dist") {
			include "license.txt"
			include "notice.txt"
			into "META-INF"
			expand(copyright: new Date().format("yyyy"), version: project.version)
		}
	}
}

configure(subprojects.findAll {
		it.name != "spring-build-src" && it.name != "spring-js-resources"}) { subproject ->

	subproject.ext {
		springVersion         = "5.2.6.RELEASE"
		springSecurityVersion = "5.3.1.RELEASE"
		servletVersion        = "3.1.0"
		hibernate5Version     = "5.4.14.Final"
		tiles3Version         = "3.0.8"
		log4jVersion          = "2.13.2"
		junit5Version         = "5.6.2"
	}

	configurations.all {
		// Check for updates every build
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'

		// Consistent slf4j version (e.g. clashes between slf4j versions)
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			if (details.requested.group == 'org.slf4j') {
				details.useVersion "1.7.25"
			}
		}

		exclude group: "org.slf4j", module: "jcl-over-slf4j"
	}

	dependencies {
		compile("org.springframework:spring-beans:$springVersion")
		compile("org.springframework:spring-context:$springVersion")
		compile("org.springframework:spring-core:$springVersion")
		compile("org.springframework:spring-expression:$springVersion")
		compileOnly("javax.el:javax.el-api:3.0.1-b06")
		testCompile("org.junit.jupiter:junit-jupiter:${junit5Version}")
		testCompile("org.hamcrest:hamcrest-all:1.3")
		testCompile("org.easymock:easymock:4.2")
		testCompile("org.apache.tomcat:tomcat-jasper-el:9.0.34")
		testRuntime("org.apache.logging.log4j:log4j-core:${log4jVersion}")
		testRuntime("org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}")
		testRuntime("org.apache.logging.log4j:log4j-jul:${log4jVersion}")
	}

	test {
		useJUnitPlatform()
		include(["**/*Tests.class", "**/*Test.class"])
		systemProperty("java.awt.headless", "true")
		systemProperty("testGroups", project.properties.get("testGroups"))
	}

	javadoc {
		options.memberLevel = JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = project.name
	}

	task sourcesJar(type: Jar, dependsOn:classes) {
		classifier = "sources"
		from sourceSets.main.allJava
	}

	task javadocJar(type: Jar) {
		classifier = "javadoc"
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
}

configure(rootProject) {
	description = "Spring Web Flow"

	repositories {
		maven { url "https://repo.spring.io/plugins-release" }
	}

	configurations {
		docs
	}

	ext {
		docResourcesVersion = "0.2.1.RELEASE"
	}

	dependencies {
		docs "io.spring.docresources:spring-doc-resources:${docResourcesVersion}@zip"
	}

	task prepareAsciidocBuild(type: Sync) {
		dependsOn configurations.docs
		// copy doc resources
		from {
			configurations.docs.collect { zipTree(it) }
		}
		// and doc sources
		from "src/reference/"
		// to a build directory of your choice
		into "$buildDir/asciidoc/build"
	}

	apply plugin: 'org.asciidoctor.convert'

	task('makePDF', type: org.asciidoctor.gradle.AsciidoctorTask) {
		dependsOn prepareAsciidocBuild
		onlyIf { !project.version.endsWith("SNAPSHOT") }
		backends 'pdf'
		sourceDir "$buildDir/asciidoc/build"
		sources {
			include 'index.adoc'
		}
		options doctype: 'book', eruby: 'erubis'
		logDocuments = true
		attributes 'icons': 'font',
			'sectanchors': '',
			'toc': '',
			'source-highlighter' : 'coderay',
			revnumber: project.version
	}

	asciidoctor {
		dependsOn makePDF
		// run asciidoctor from that directory
		sourceDir "$buildDir/asciidoc/build"
		sources {
			include 'index.adoc'
		}
		resources {
			from(sourceDir) {
				include 'images/*', 'css/**', 'js/**'
			}
		}
		logDocuments = true
		backends = ["html5"]
		options doctype: 'book', eruby: 'erubis'
		attributes  'docinfo': 'shared',
			// use provided stylesheet
			stylesdir: "css/",
			stylesheet: 'spring.css',
			'linkcss': true,
			'icons': 'font',
			// use provided highlighter
			'source-highlighter=highlight.js',
			'highlightjsdir=js/highlight',
			'highlightjs-theme=github',
			revnumber: project.version
	}

	// don"t publish the default jar for the root project
	configurations.archives.artifacts.clear()

	artifacts {
	}

	task api(type: Javadoc) {
		group = "Documentation"
		description = "Generates aggregated Javadoc API documentation."
		title = "${rootProject.description} ${version} API"
		options.memberLevel = JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = rootProject.description
		options.overview = "src/api/overview.html"
		source subprojects.collect { project ->
			project.sourceSets.main.allJava
		}
		destinationDir = new File(buildDir, "api")
		classpath = files(subprojects.collect { project ->
			project.sourceSets.main.compileClasspath
		})
		maxMemory = "1024m"
	}

	task docsZip(type: Zip) {
		group = "Distribution"
		baseName = "spring-webflow"
		classifier = "docs"
		description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at static.springframework.org/spring-webflow/docs."

		from (api) {
			into "api"
		}

		from (asciidoctor) {
			include "*.html"
			include "css/**"
			include "js/**"
			include "images/**"
			into "reference"
		}

		from (makePDF) {
			include "*.pdf"
			into "reference"
		}
	}

	task schemaZip(type: Zip) {
		group = "Distribution"
		baseName = "spring-webflow"
		classifier = "schema"
		description = "Builds -${classifier} archive containing all " +
			"XSDs for deployment at static.springframework.org/schema."

		subprojects.each { subproject ->
			Properties schemas = new Properties()

			subproject.sourceSets.main.resources.find {
				it.path.endsWith("META-INF/spring.schemas")
			}?.withInputStream { schemas.load(it) }

			for (def key : schemas.keySet()) {
				def shortName = key.replaceAll(/http.*schema.(.*).spring-.*/, '$1')
				assert shortName != key
				File xsdFile = subproject.sourceSets.main.allSource.find {
					it.path.endsWith(schemas.get(key))
				} as File
				assert xsdFile != null
				into (shortName) {
					from xsdFile.path
				}
			}
		}

		project(":spring-webflow").sourceSets.main.resources.matching {
			include '**/engine/model/builder/xml/*.xsd'
		}.each { File file ->
			into ('webflow') {
				from file.path
			}
		}
	}

	task distZip(type: Zip, dependsOn: [docsZip, schemaZip]) {
		group = "Distribution"
		baseName = "spring-webflow"
		classifier = "dist"
		description = "Builds -${classifier} archive, containing all jars and docs, " +
					  "suitable for community download page."

		def baseDir = "${baseName}-${project.version}"

		from("src/dist") {
			include "notice.txt"
			into "${baseDir}"
			expand(copyright: new Date().format("yyyy"), version: project.version)
		}

		from("src/dist") {
			include "readme.txt"
			include "license.txt"
			into "${baseDir}"
			expand(version: project.version)
		}

		from(zipTree(docsZip.archivePath)) {
			into "${baseDir}/docs"
		}

		from(zipTree(schemaZip.archivePath)) {
			into "${baseDir}/schema"
		}


		subprojects.each { subproject ->
			into ("${baseDir}/libs") {
				from subproject.jar
				if (subproject.tasks.findByPath("sourcesJar")) {
					from subproject.sourcesJar
				}
				if (subproject.tasks.findByPath("javadocJar")) {
					from subproject.javadocJar
				}
			}
		}
	}

	artifacts {
		archives docsZip
		archives schemaZip
		archives distZip
	}
}
