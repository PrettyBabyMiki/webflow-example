<?xml version="1.0" encoding="UTF-8"?>
<chapter id="spring-mvc">
	<title>Spring MVC Integration</title>
	<sect1 id="spring-mvc-introduction">
		<title>Introduction</title>
		<para>
			This chapter shows how to integrate Web Flow into a Spring MVC web application.
			The <code>booking-mvc</code> sample application is a good reference for Spring MVC with Web Flow.
			This application is a simplified travel site that allows users to search for and book hotel rooms.
		</para>
	</sect1>
	<sect1 id="spring-mvc-config-web.xml">
		<title>Configuring web.xml</title>
		<para>
			The first step to using Spring MVC is to route requests to the <code>DispatcherServlet</code> in the <code>web.xml</code> file.
			In this example, we map all URLs that begin with <code>/spring/</code> to the servlet.
			An <code>init-param</code> is used to pass the <code>contextConfigLocation</code>.
			This is the location of the Spring configuration for the application.
		</para>
		<programlisting language="xml"><![CDATA[
<servlet>
    <servlet-name>Spring MVC Dispatcher Servlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/web-application-config.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
</servlet>
	
<servlet-mapping>
    <servlet-name>Spring MVC Dispatcher Servlet</servlet-name>
    <url-pattern>/spring/*</url-pattern>
</servlet-mapping>
		]]></programlisting>
	</sect1>
	<sect1 id="spring-mvc-config-spring">
		<title>Configuring Spring</title>
		<sect2 id="spring-mvc-config-spring-url-mapping">
			<title>URL Mapping</title>
			<para>
				Inside the <code>DispatcherServlet</code> request need to be mapped with finer grain.
				Using a <code>SimpleUrlHandlerMapping</code>, request URLs are mapped to controllers and handlers.
			</para>
			<programlisting language="xml"><![CDATA[
<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
    <property name="mappings">
        <value>
            /hotels/*=hotelsController
            /hotels/booking=bookingFlowHandler
        </value>
    </property>
</bean>
			]]></programlisting>
			<para>
				In this example both a standard MVC controller and a Web Flow handler are configured.
				The <code>hotelsController</code> supports the free navigation aspects of searching and viewing hotels.
				The <code>bookingFlowHandler</code> supports the controlled navigation aspect of booking a hotel room.
			</para>
		</sect2>
		<sect2 id="spring-mvc-config-spring-flow-controllers">
			<title>Flow Controllers</title>
			<para>
				Flow controllers provide a basic hook from Spring MVC into Web Flow.
				The <code>FlowController</code> class is an implementation of MVC's <code>Controller</code> interface.
			</para>
			<programlisting language="xml"><![CDATA[
<bean id="flowController" class="org.springframework.webflow.mvc.servlet.FlowController">
    <constructor-arg ref="flowExecutor"/>
</bean>
			]]></programlisting>
			<para>
				Web Flow 1.0 used controllers as the only way to hook Web Flow into Spring MVC.
				With Web Flow 2.0 flow controllers should be used when the flow is self contained and does not need to interact with the environment.
			</para>
		</sect2>
		<sect2 id="spring-mvc-config-spring-flow-adapters">
			<title>Flow Adapters</title>
			<para>
				Flow adapters provide a richer integration point between Spring MVC and Web Flow.
				The flow adapter provides hooks into the flow execution that can:
				<itemizedlist>
					<listitem>
						<para>select the flow to execute (by default the flow id is inferred from the URL)</para>
					</listitem>
					<listitem>
						<para>pass input parameters to the flow on initialization</para>
					</listitem>
					<listitem>
						<para>handle the flow execution outcome</para>
					</listitem>
					<listitem>
						<para>handle exceptions</para>
					</listitem>
				</itemizedlist>
			</para>
			<para>
				A flow handler should be used whenever integration with any of these hooks is desired.
			</para>
			<para>
				The <code>AbstractFlowHandler</code> class is an implementation of <code>FlowHandler</code> that provides default implementations for these hooks.
			</para>
			<para>
				A common pattern to handle a flow outcome is to redirect to a new page instead of rendering a view in the <code>end-state</code>.
				This allows the URL to be refreshed without throwing an exception.
			</para>
			<programlisting language="xml"><![CDATA[
<bean id="bookingFlowHandler" 
      class="org.springframework.webflow.samples.booking.BookingFlowHandler" />
			]]></programlisting>
			<programlisting language="java"><![CDATA[
public class BookingFlowHandler extends AbstractFlowHandler {
    public ModelAndView handleExecutionOutcome(String outcome, AttributeMap output, 
            HttpServletRequest request, HttpServletResponse response) {
        return new ModelAndView(new RedirectView("/spring/hotels/index", true));
    }
}
			]]></programlisting>
		</sect2>
		<sect2 id="spring-mvc-config-spring-view-resolution">
			<title>View Resolution</title>
			<para>
				Views in Web Flow 2.0 attempt to automatically resolve unless explicitly specified.
				In a Spring MVC environment, a <code>view-state</code> will try to find a JSP view based on the <code>id</code> of the state.
				For example, <code>&lt;view-state id="intro"&gt;</code> will resolve to <code>intro.jsp</code> in the same directory as the flow definition.
				By specifying the <code>view</code> attribute, a different file name can be selected, however, it must still be a JSP file.
			</para>
			<para>
				A custom view resolver is required if different behavior is needed.
				To create a custom view resolver the <code>flow-builder-services</code> attribute on <code>flow-registry</code> must define a new <code>webflow:flow-builder-services</code> element with a <code>view-factory-creator</code>.
			</para>
			<programlisting language="xml"><![CDATA[
<webflow:flow-registry id="flowRegistry" flow-builder-services="flowBuilderServices">
    ...
</webflow:flow-registry>

<webflow:flow-builder-services id="flowBuilderServices" view-factory-creator="mvcViewFactoryCreator"/>

<bean id="mvcViewFactoryCreator" class="org.springframework.webflow.mvc.MvcViewFactoryCreator">
    <property name="viewResolvers" ref="customViewResolver"/>
</bean>
			]]></programlisting>
		</sect2>
	</sect1>
</chapter>
